q1_line_graph <- ggplot(assign_data, (aes(x = date, y = hits, group = keyword))) +
geom_line(aes(color = keyword)) + theme_linedraw() + labs(x = "Date", y = "Hits") +
geom_vline(xintercept = as.numeric(assign_data$date[75]),
color = "red") + geom_text(aes(x = as.numeric(date[120]), label="Start of Pandemic (2020-03-15)", y=90), color = "red") +
scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01"), labels = waiver())
q1_line_graph
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sou
hq1_line_graph
library(here)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggtext)
library(showtext)
library(stringr)
library(fastDummies)
library(modelsummary)
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
assign_data$date <- as.factor(assign_data$date)
assign_data$date <- as.numeric(assign_data$date)
q1_line_graph <- ggplot(assign_data, (aes(x = date, y = hits, group = keyword))) +
geom_line(aes(color = keyword)) + theme_linedraw() + labs(x = "Date", y = "Hits") +
geom_vline(xintercept = as.numeric(assign_data$date[75]),
color = "red") + geom_text(aes(x = as.numeric(date[120]), label="Start of Pandemic (2020-03-15)", y=90), color = "red") +
scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01"), labels = waiver())
q1_line_graph
#I wanted to make a line graph without converting our dates to numeric:
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sourdough looked similar to cereal but did not look anything like soup or sandwich so considering droping thos
library(here)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggtext)
library(showtext)
library(stringr)
library(fastDummies)
library(modelsummary)
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
#I wanted to make a line graph without converting our dates to numeric:
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sourdough looked similar to cereal but did not look anything like soup or sandwich so considering droping thos
new_regdata$date <- as.factor(new_regdata$date)
#Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
#Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#Dropping Control Groups
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test,new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
#create a realtive_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata$date <- as.factor(new_regdata$date)
new_regdata$date <- as.numeric(new_regdata$date)
relative_regdata<- new_regdata %>% mutate(reltime = round((as.numeric(date) - 15)))
#create an "After" variable equal to 1/0 or True/False if the date is March 15 or afterwards
#illustrate how the values of "relative_month" line up with "date" and subtracte a number from "relative_month" so the last period just before treatment (Feb 16 - Mar 14)  is 0. (Also, change the Jan 1 -14 month so it's one less than the Jan 15- Feb 14 month)
View(relative_regdata)
View(assign_data)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
#create a realtive_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata$date <- as.factor(new_regdata$date)
relative_regdata<- new_regdata %>% mutate(reltime = round((as.numeric(date) - 15)))
View(relative_regdata)
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
#create a realtive_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
library(lubridate)
new_regdata %>% mutate(date = ymd(date)) %>% mutate(time_to_treatment = date - 15)
class(new_regdata$date)
as.factor(new_regdata$date)
as.numeric(new_regdata$date)
new_regdata$date <- as.factor(new_regdata$date)
new_regdata$date <- as.numeric(new_regdata$date)
View(new_regdata)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
new_regdata <- new_regdata %>% mutate(numeric_date = as.factor(new_regdata$date) %>% as.numeric(new_regdata$date))
View(new_regdata)
new_regdata <- new_regdata %>% mutate(reltime = round(as.numeric(as.factor(new_regdata$date)) - 15)
View(new_regdata)
View(new_regdata)
new_regdata <- new_regdata %>% mutate(reltime = round(as.numeric(as.factor(new_regdata$date)) - 15)
new_regdata
new_regdata
new_regdata <- new_regdata %>% mutate(reltime = (round(as.numeric(as.factor(new_regdata$date)) - 15))
View(new_regdata)
View(new_pretrend_test)
View(new_regdata)
View(new_regdata)
new_regdata <- new_regdata %>% mutate(reltime = numeric_date - 15)
View(new_regdata)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
new_regdata$date <- as.Date()
new_regdata$date <- format(as.Date(new_regdata$date), "%Y/%m/%d")
new_regdata <- mutate(reltime = new_regdata$date - 15)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
View(new_regdata)
new_regdata <- new_regdata %>% mutate(date_numeric = as.numeric(as.factor(new_regdata$date)))
new_regdata <- mutate(reltime = new_regdata$date - 15)
new_regdata <- mutate(reltime = new_regdata$date_numeric - 15)
new_regdata <- new_regdata %>% mutate(date_numeric = as.numeric(as.factor(new_regdata$date)))
new_regdata <- mutate(reltime = new_regdata$date_numeric - 15)
View(new_regdata)
new_regdata <- mutate(reltime = new_regdata$date_numeric - 15)
class(new_regdata$date_numeric)
new_regdata <- mutate(reltime = new_regdata$date_numeric - 15)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggtext)
library(showtext)
library(stringr)
library(fastDummies)
library(modelsummary)
#I wanted to make a line graph without converting our dates to numeric:
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sourdough looked similar to cereal but did not look anything like soup or sandwich so considering droping thos
#Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
#Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#Dropping Control Groups
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test,new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
View(new_regdata)
new_regdata$date <- as.Date(new_regdata$date, format= "%y-%m-d")
View(new_regdata)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
class(new_regdata$date)
as.numeric(new_regdata$date)
as.factor(new_regdata$date)
as.numeric(new_regdata$date)
as.factor(new_regdata$date)
new_regdata$date <- as.Date(new_regdata$date, format = "%y-%m-%d")
new_regdata$date
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
new_regdata$date <- as.factor(new_regdata$date)
new_regdata$date <- as.factor("new_regdata$date")
new_regdata$date <- strptime(new_regdata$date, format = "%y-%m-%d") #defining what is the orginal format of the dates
new_regdata$date <- as.Date(new_regdata$date, format = "%Y-%m-%d") #defining desired format of date
new_regdata$date
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
new_regdata$date <- as.factor(new_regdata$date)
new_regdata$date <- as.numeric(new_regdata$date)
new_regdata$date
new_regdata <- mutate(date_numeric = new_regdata$date)
new_regdata$date
#Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
#Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#Dropping Control Groups
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test,new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
assign_data$date <- as.factor(assign_data$date)
assign_data$date <- as.numeric(assign_data$date)
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
library(lubridate)
assign_data$date <- ymd(assign_data$date)
View(assign_data)
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
assign_data$new_date <- ymd(assign_data$date)
View(assign_data)
#I wanted to make a line graph without converting our dates to numeric:
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
library(lubridate)
assign_data$new_date <- ymd(assign_data$date)
class(assign_data$new_date)
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
assign_data$new_date <- ymd(assign_data$date)
class(assign_data$new_date)
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sourdough looked similar to cereal but did not look anything like soup or sandwich so considering droping thos
#Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
#Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#Dropping Control Groups
#dropping soup and sandwich from data
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test,new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
View(assign_data)
#create a relative_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata %>%
mutate(time_to_treatment = new_date - 15)
#create a relative_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata %>%
mutate(reltime = new_date - 15)
#create a relative_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata <- new_regdata %>% mutate(reltime = new_date - 15)     #shift date back 15 days
new_regdata
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
assign_data$new_date <- ymd(assign_data$date)
class(assign_data$new_date)
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
View(assign_data)
#create a relative_month variable by shifting the "date" variable back 15 days and then taking the month of the resulting date
new_regdata <- new_regdata %>% mutate(reltime = new_date - 15)     #shift date back 15 days, used new_date instead of date as date is a character while new date is the class date
new_regdata
View(new_regdata)
new_regdata <- new_regdata %>% mutate(After = ifelse(reltime >= "2020-03-15", 1, 0 ))
View(new_regdata)
#create a relative_month variable by shifting the "date" variable back 15 days
new_regdata <- new_regdata %>% mutate(relative_month = new_date - 15)     #shift date back 15 days, used new_date instead of date as date is a character while new date is the class date
#and then taking the month of the resulting date create an "After" variable equal to 1/0 or True/False if the date is March 15 or afterwards
new_regdata <- new_regdata %>% mutate(After = ifelse(relative_month >= "2020-03-15", 1, 0 ))
#illustrate how the values of "relative_month" line up with "date" and subtracte a number from "relative_month" so the last period just before treatment (Feb 16 - Mar 14)  is 0. (Also, change the Jan 1 -14 month so it's one less than the Jan 15- Feb 14 month)
View(new_regdata)
new_regdata<- regdata %>% filter(keyword %in% c("sourdough","cereal"))
#create a relative_month variable by shifting the "date" variable back 15 days
new_regdata <- new_regdata %>% mutate(relative_month = new_date - 15)     #shift date back 15 days, used new_date instead of date as date is a character while new date is the class date
#and then taking the month of the resulting date create an "After" variable equal to 1/0 or True/False if the date is March 15 or afterwards
new_regdata <- new_regdata %>% mutate(After = ifelse(relative_month >= "2020-03-15", 1, 0 ))
#illustrate how the values of "relative_month" line up with "date" and subtracte a number from "relative_month" so the last period just before treatment (Feb 16 - Mar 14)  is 0. (Also, change the Jan 1 -14 month so it's one less than the Jan 15- Feb 14 month)
#create a relative_month variable by shifting the "date" variable back 15 days (so that the treatment day is the first day of the month)  and then taking the month of the resulting date
new_regdata <- new_regdata %>% mutate(relative_month = new_date - 14)
new_regdata <- new_regdata %>% mutate(After = ifelse(relative_month >= "2020-03-15", 1, 0 ))
relative_month_date_illustration <- new_regdata %>% select(relative_month, new_date)
View(relative_month_date_illustration)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggtext)
library(showtext)
library(stringr)
library(fastDummies)
library(modelsummary)
library(lubridate)
library(gtsummary)
library(fixest)
name <- Sys.info()
name[7]
assign_data <- read.csv("a3_p1_sourdough_trends.csv")
#create column new_date to change the date variable into dates
assign_data$date <- str_replace_all(assign_data$date, "T00:00:00Z", "")
assign_data$new_date <- ymd(assign_data$date)
class(assign_data$new_date)
hq1_line_graph <- ggplot(assign_data, aes(x = date, y = hits, colour = keyword, group = keyword)) +
theme_classic()  + geom_vline(xintercept = assign_data$date[75], show.legend = FALSE) + annotate("text", x=assign_data$date[70], y=86, label="Start of Pandemic ", angle=90) + geom_line() +  scale_x_discrete(breaks = c("2020-01-01",
"2020-02-01",
"2020-03-01",
"2020-04-01",
"2020-05-01",
"2020-06-01",
"2020-07-01",
"2020-08-01")) + ggtitle("Interest in Food Types Over Time")
hq1_line_graph
# Look at plot at pre-treatment, to gauge trend lines and similarities or differences:
hq1_line_graph + coord_cartesian(xlim= c(0,76))
#we can see before the start of the pandemic sourdough looked similar to cereal but did not look anything like soup or sandwich so considering droping thos
# Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
# Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
# Dropping Control Groups
# Dropping soup and sandwich from data
new_regdata <- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test, new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
#create a relative_month variable by shifting the "date" variable back 15 days (so that the treatment day is the first day of the month)  and then taking the month of the resulting date
new_regdata <- assign_data
new_regdata <- new_regdata %>% mutate(relative_month = new_date - 14)
#shift date back 15 days, used new_date instead of date as date is a character while new date is the class date
# I used 14 so that the treatment day is may first rather than February 29
#create an "After" variable equal to 1/0 or True/False if the date is March 15 or afterwards
new_regdata <- new_regdata %>% mutate(After = ifelse(relative_month >= "2020-03-15", 1, 0 ))
#illustrate how the values of "relative_month" line up with "date" and subtract a number from "relative_month" so the last period just before treatment (Feb 16 - Mar 14)  is 0. (Also, change the Jan 1 -14 month so it's one less than the Jan 15- Feb 14 month)
relative_month_date_illustration <- new_regdata %>% select(relative_month, new_date)
#table with relative month and new date next to each other
relative_month_date_illustration <- relative_month_date_illustration %>% mutate(diff_bt_date = difftime(new_date, relative_month, units = "days"))
plot(relative_month_date_illustration$diff_bt_date)
q_c_table <- tibble(relative_month_date_illustration)
fixed_effects_model <- feols(hits ~ interaction | treated + pandemic_begun,data = new_regdata)
fixed_effects_model <- feols(hits ~ interaction, data = new_regdata)
View(new_regdata)
# Create Treated Variable for sourdough https://www.princeton.edu/~otorres/DID101R.pdf
regdata <- assign_data %>% mutate(treated = ifelse(keyword == "sourdough", 1, 0))
# Create a dummy variable to indicate the time when the treatment started.
regdata <- regdata %>% mutate(pandemic_begun = ifelse(date >= "2020-03-15", 1, 0))
# Create interaction variable between treated and beginning of pandemic
regdata <- regdata %>% mutate(interaction = treated*pandemic_begun)
# Statistical tests: are the two groups' trends different?
pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=regdata)
msummary(list(pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
# Dropping Control Groups
# Dropping soup and sandwich from data
new_regdata <- regdata %>% filter(keyword %in% c("sourdough","cereal"))
unique(new_regdata$keyword)
new_pretrend_test <- lm(hits ~ treated + pandemic_begun + interaction, data=new_regdata)
msummary(list(pretrend_test, new_pretrend_test),
vcov=c(rep("robust",1)),
stars=c('*' = .1, '**' = .05, '***' = .01)) # Interpret each coefficient here
#i think this is how you do it but im not sure
#create a relative_month variable by shifting the "date" variable back 15 days (so that the treatment day is the first day of the month)  and then taking the month of the resulting date
new_regdata <- new_regdata %>% mutate(relative_month = new_date - 14)
#shift date back 15 days, used new_date instead of date as date is a character while new date is the class date
# I used 14 so that the treatment day is may first rather than February 29
#create an "After" variable equal to 1/0 or True/False if the date is March 15 or afterwards
new_regdata <- new_regdata %>% mutate(After = ifelse(relative_month >= "2020-03-15", 1, 0 ))
#illustrate how the values of "relative_month" line up with "date" and subtract a number from "relative_month" so the last period just before treatment (Feb 16 - Mar 14)  is 0. (Also, change the Jan 1 -14 month so it's one less than the Jan 15- Feb 14 month)
relative_month_date_illustration <- new_regdata %>% select(relative_month, new_date)
#table with relative month and new date next to each other
relative_month_date_illustration <- relative_month_date_illustration %>% mutate(diff_bt_date = difftime(new_date, relative_month, units = "days"))
plot(relative_month_date_illustration$diff_bt_date)
q_c_table <- tibble(relative_month_date_illustration)
View(new_regdata)
fixed_effects_model <- feols(hits~treated, data = new_regdata)
fixed_effects_model
fixed_effects_model <- feols(hits~treated + pandemic_begin + interaction, data = new_regdata)
fixed_effects_model <- feols(hits~treated + pandemic_begun + interaction, data = new_regdata)
fixed_effects_model
msummary(fixed_effects_model, vcov = ~keyword)
msummary(fixed_effects_model)
#report and interper results, with standard errors clustered at keyword level
msummary(fixed_effects_model, vcov =c(NULL,~keyword))
#report and interper results, with standard errors clustered at keyword level
msummary(fixed_effects_model, vcov =NULL, vcov= ~keyword)
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov =c(NULL,~keyword))
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov =(NULL,~keyword))
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov =NULL,~keyword)
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov =NULL,~keyword))
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov = list("NULL, ~keyword")
#report and interper results, with standard errors clustered at keyword level
msummary(list(fixed_effects_model,fixed_effects_model), vcov = list("NULL, ~keyword"))
msummary(list(fixed_effects_model,fixed_effects_model), vcov = list("NULL, ~keyword"))
msummary(list(fixed_effects_model,fixed_effects_model), vcov = list("classical, ~keyword"))
msummary(fixed_effects_model, vcov= ~keyword)
msummary(fixed_effects_model, vcov= ~keyword, digits = 10)
msummary(fixed_effects_model, vcov= ~keyword, digits = 8)
msummary(fixed_effects_model, vcov= ~keyword)
msummary(fixed_effects_model, vcov= ~keyword, fmt = '%#.8f'))
msummary(fixed_effects_model, vcov= ~keyword, fmt = '%#.8f')
